from dotenv import load_dotenv
import os
import requests
import alpaca_trade_api as tradeapi
import time
import logging
import schedule

# Load environment variables from the .env file
load_dotenv("keys.env")

# Access environment variables
ALPACA_API_KEY = os.getenv('APCA_API_KEY_ID')
ALPACA_SECRET_KEY = os.getenv('APCA_API_SECRET_KEY')
BASE_URL = os.getenv('BASE_URL')
QUIVER_API_KEY = os.getenv('QUIVER_API_KEY')

# Check if the variables are loaded correctly (Optional Debugging)
logging.basicConfig(filename="trading_bot.log", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def log_and_print(message):
    logging.info(message)
    print(message)

log_and_print(f"API Key: {ALPACA_API_KEY}")
log_and_print(f"API Secret: {ALPACA_SECRET_KEY}")
log_and_print(f"Base URL: {BASE_URL}")

# Initialize Alpaca API client
api = tradeapi.REST(ALPACA_API_KEY, ALPACA_SECRET_KEY, BASE_URL, api_version='v2')

# Dry-run mode to simulate trades
DRY_RUN = True  # Set to False to execute live trades

# Function to fetch congressional trades
def get_congress_trades():
    url = "https://api.quiverquant.com/beta/live/congresstrading"
    headers = {"Authorization": QUIVER_API_KEY}
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            log_and_print(f"Error fetching data: {response.status_code}")
            return []
    except Exception as e:
        log_and_print(f"Error connecting to Quiver API: {e}")
        return []

# Function to filter top bought/sold stocks
def filter_trades(trades, action="buy", top_n=5):
    stock_counts = {}
    for trade in trades:
        if trade['Transaction'] == action.capitalize():
            symbol = trade['Ticker']
            stock_counts[symbol] = stock_counts.get(symbol, 0) + 1
    
    sorted_stocks = sorted(stock_counts.items(), key=lambda x: x[1], reverse=True)
    return [stock[0] for stock in sorted_stocks[:top_n]]

# Function to place trades
def place_trade(symbol, side, allocation_percentage=0.10, take_profit=1.2, stop_loss=0.9):
    try:
        if DRY_RUN:
            log_and_print(f"Dry-run: Would place {side} order for {symbol}")
            return
        
        # Get the current market price of the stock
        market_price = api.get_last_trade(symbol).price
        
        # Get account info to check available balance
        account = api.get_account()
        cash_balance = float(account.cash)
        
        # Calculate the available amount for this trade based on the allocation percentage
        available_to_trade = cash_balance * allocation_percentage
        
        # Calculate how many shares can be bought based on the available funds
        max_shares = int(available_to_trade / market_price)
        
        # If you can't afford at least one share, skip placing the order
        if max_shares <= 0:
            log_and_print(f"Not enough funds to buy any shares of {symbol}. Skipping...")
            return
        
        # Submit the order
        api.submit_order(
            symbol=symbol,
            qty=max_shares,
            side=side,
            type='market',
            time_in_force='gtc',
            order_class='bracket',
            take_profit={'limit_price': market_price * take_profit},
            stop_loss={'stop_price': market_price * stop_loss}
        )
        log_and_print(f"{side.capitalize()} order placed for {max_shares} shares of {symbol} at {market_price}")
    except Exception as e:
        log_and_print(f"Error placing order for {symbol}: {e}")

# Main script execution
def main():
    trades = get_congress_trades()
    
    if not trades:
        log_and_print("No trades data to process. Exiting...")
        return
    
    # Get top 5 buys and top 3 sells
    top_buys = filter_trades(trades, "buy", top_n=5)
    top_sells = filter_trades(trades, "sell", top_n=3)
    
    # Execute buys with percentage allocation
    for stock in top_buys:
        place_trade(stock, side='buy', allocation_percentage=0.10)  # 10% of available funds
    
    # Execute shorts (if supported by Alpaca)
    for stock in top_sells:
        place_trade(stock, side='sell', allocation_percentage=0.10)  # 10% of available funds
    
    log_and_print("Trading session complete.")

# Schedule the script to run daily at 8 AM
schedule.every().day.at("08:00").do(main)

# Run scheduled tasks
if __name__ == "__main__":
    while True:
        schedule.run_pending()
        time.sleep(1)  # Sleep to allow for periodic task execution
